@page "/"
@inherits ComponentBase
@layout Layout.MainLayout
@using RAGChatBot.WebApp.Services
@using System.Net.Http.Json
@using MudBlazor
@using System.Text
@inject IConfiguration Configuration
@inject HttpClient Http
@inject IJSRuntime JS
@inject ChatStateService ChatState

<PageTitle>Chatbot</PageTitle>

<MudPaper Elevation="2" Class="pa-4" Style="height: calc(100vh - 64px); display: flex; flex-direction: column; position: relative;">
    <div class="d-flex align-center mb-2">
        <MudText Typo="Typo.h6" Class="ml-2">
            @(ChatState.SelectedConversation?.Title ?? "New Conversation")
        </MudText>
    </div>
    <!-- Chat content scrolls, takes available space -->
    <MudPaper id="chatContainer" Class="pa-4"
              Style="flex: 1; overflow-y: auto; background-color: var(--mud-palette-background-gray); margin-bottom: 55px"
              Elevation="1">
        @if (ChatState.SelectedConversation == null || ChatState.SelectedConversation.Messages == null || !ChatState.SelectedConversation.Messages.Any())
        {
            <MudText Color="Color.Default" Align="Align.Center">Start a conversation below!</MudText>
        }
        else
        {
            @foreach (var message in ChatState.SelectedConversation.Messages.TakeLast(50))
            {
                bool isUserMessage = message.Sender == "You";
                <MudCard Class="@(isUserMessage ? "mb-3 mud-theme-primary" : "mb-3 mud-theme-secondary")" Elevation="2">
                    <MudCardContent Class="dark-text">
                        @if (isUserMessage)
                        {
                            <MudText Typo="Typo.body1">@((MarkupString)message.Text)</MudText>
                        }
                        else
                        {
                            @if (string.IsNullOrEmpty(message.Text))
                            {
                                <MudText Color="Color.Error">No bot response received. Please try again.</MudText>
                            }
                            else
                            {
                                <MudText Typo="Typo.body1"><MarkdownRenderer Content="@message.Text" /></MudText>
                            }
                        }
                    </MudCardContent>
                </MudCard>
            }
            @if (IsProcessing)
            {
                <MudText Align="Align.Center" Class="processing-animation">
                    <MudProgressCircular Class="mr-2" Size="Size.Small" Color="Color.Info" Indeterminate="true" />
                    Processing...
                </MudText>
            }
        }
    </MudPaper>
    <!-- Place the ChatInput component in a container fixed at the bottom -->
    <div style="position: absolute; bottom: 16px; left: 16px; right: 16px;">
        <ChatInput UserMessage="@UserMessage"
                   UserMessageChanged="@(val => UserMessage = val)"
                   IsProcessing="@IsProcessing"
                   OnEnterKey="HandleKeyPress"
                   @ref="chatInputComponent" />
    </div>

</MudPaper>

@code {
    // This reference is for focusing the input when needed.
    private ChatInput chatInputComponent;
    public string UserMessage { get; set; } = string.Empty;
    public bool IsProcessing { get; set; } = false;
    private bool _shouldScrollToBottom = false;
    private string apiUrl;

    protected override void OnInitialized()
    {
        ChatState.OnChange += StateHasChanged;
        apiUrl = Configuration["ApiSettings:ChatbotApiUrl"];
    }

    protected override async Task OnInitializedAsync()
    {
        await ChatState.LoadConversationsAsync();
        if (ChatState.ConversationSummaries.Any())
        {
            await ChatState.SelectConversation(ChatState.ConversationSummaries.First().ConversationId);
        }
        else
        {
            await ChatState.HandleNewConversation();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Auto focus on first render and after scrolling.
        if (firstRender)
        {
            await chatInputComponent.FocusAsync();
        }
        if (_shouldScrollToBottom)
        {
            _shouldScrollToBottom = false;
            await ScrollToBottom();
        }
    }

    public void Dispose()
    {
        ChatState.OnChange -= StateHasChanged;
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(UserMessage))
        {
            var messageToSend = UserMessage;
            UserMessage = string.Empty;
            IsProcessing = true;
            StateHasChanged();
            await HandleSendMessageAsync(messageToSend);
        }
    }


    private async Task HandleSendMessageAsync(string messageToSend)
    {
        if (ChatState.SelectedConversation == null)
        {
            IsProcessing = false;
            return;
        }

        // Add user message.
        ChatState.SelectedConversation.Messages.Add(new Message { Text = messageToSend, Sender = "You" });
        ChatState.NotifyStateChanged();
        _shouldScrollToBottom = true;
         
        var tempId = ChatState.SelectedConversation.ConversationId; // Capture temporary ID.
        if (!string.IsNullOrEmpty(tempId))
        {
            apiUrl += $"?conversationId={tempId}";
        }

        try
        {
            var response = await Http.PostAsJsonAsync(apiUrl, new { Prompt = messageToSend });
            if (response.IsSuccessStatusCode)
            {
                var chatResponse = await response.Content.ReadFromJsonAsync<ChatResponse>();
                if (chatResponse != null && !string.IsNullOrEmpty(chatResponse.Response))
                {
                    var actualId = chatResponse.ConversationId;
                    // Update conversation ID and title.
                    ChatState.SelectedConversation.ConversationId = actualId;
                    var summary = ChatState.ConversationSummaries.FirstOrDefault(c => c.ConversationId == tempId);
                    if (summary != null && tempId != actualId)
                    {
                        summary.ConversationId = actualId;
                    }
                    if (string.IsNullOrWhiteSpace(ChatState.SelectedConversation.Title) || ChatState.SelectedConversation.Title == "New Conversation")
                    {
                        ChatState.SelectedConversation.Title = messageToSend.Length > 50 ? messageToSend.Substring(0, 50) + "..." : messageToSend;
                        if (summary != null)
                        {
                            summary.Title = ChatState.SelectedConversation.Title;
                        }
                    }

                    // Create an empty bot message for the typing effect.
                    var botMessage = new Message { Text = "", Sender = "Bot" };
                    ChatState.SelectedConversation.Messages.Add(botMessage);
                    ChatState.NotifyStateChanged();
                    _shouldScrollToBottom = true;

                    // Optimized typing effect: line-by-line with fallback for short responses.
                    // var lines = chatResponse.Response.Split('\n');
                    // if (chatResponse.Response.Length < 100)
                    // {
                    //     botMessage.Text = chatResponse.Response;
                    //     ChatState.NotifyStateChanged();
                    //     await ScrollToBottom();
                    // }
                    // else
                    // {
                    //     int delayMs = IsLocalhost() ? 100 : 200;
                    //     var sb = new StringBuilder();
                    //     int batchSize = 3; update every 3 lines
                    //     for (int i = 0; i < lines.Length; i++)
                    //     {
                    //         sb.AppendLine(lines[i]);
                    //         Update every few lines or on the last iteration
                    //         if ((i + 1) % batchSize == 0 || i == lines.Length - 1)
                    //         {
                    //             botMessage.Text = sb.ToString();
                    //             ChatState.NotifyStateChanged();
                    //             await ScrollToBottom();
                    //             await Task.Delay(delayMs);
                    //         }
                    //     }
                    // }
                     

                    // Simulate typing effect by appending characters in batches.
                    for (int i = 0; i < chatResponse.Response.Length; i += 15)
                    {
                        botMessage.Text += chatResponse.Response.Substring(i, Math.Min(15, chatResponse.Response.Length - i));
                        ChatState.NotifyStateChanged();
                        await ScrollToBottom();
                        await Task.Delay(1); // Increased delay for better animation visibility
                    }

                }
            }
        }
        catch (Exception ex)
        {
            ChatState.SelectedConversation.Messages.Add(new Message { Text = $"Error: {ex.Message}. Check your connection.", Sender = "Bot" });
        }
        finally
        {
            IsProcessing = false;
            ChatState.NotifyStateChanged();
            _shouldScrollToBottom = true;
            // Auto focus back to the input field.
            await chatInputComponent.FocusAsync();
        }
    }

    private async Task ScrollToBottom()
    {
        await JS.InvokeVoidAsync("scrollChatToBottom", "chatContainer");
    }

    // Helper method to detect localhost vs. deployed environment
    private bool IsLocalhost()
    {
        return Http.BaseAddress?.Host.Contains("localhost") ?? true;
    }

    public class ChatResponse
    {
        public string ConversationId { get; set; } = string.Empty;
        public string Response { get; set; } = string.Empty;
    }
}