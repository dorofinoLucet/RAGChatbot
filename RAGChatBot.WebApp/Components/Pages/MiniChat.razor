@page "/mini-chat"
@page "/mini-chat/{m}"
@layout Layout.MiniChatLayout
@using System.Net.Http.Json
@using MudBlazor
@using RAGChatBot.WebApp.Services

@inject IConfiguration Configuration
@inject HttpClient Http
@inject IJSRuntime JS
@inject ChatStateService ChatState
@inject NavigationManager Navigation

<PageTitle>Mini Chat</PageTitle>

<div class="d-flex" Style="width: 100%; height: calc(100vh - 71px);">
    <!-- Collapsible Menu -->
    <div class="quick-questions-menu @(isMenuExpanded ? "expanded" : "collapsed")">
        <MudButton Class="toggle-button" OnClick="ToggleMenu">
            <MudIcon Class="ms-1" Icon="@(isMenuExpanded ? Icons.Material.Filled.MenuOpen : Icons.Material.Filled.Menu)" />
        </MudButton>
        @if (isMenuExpanded)
        {
            <div class="questions-list">
                @foreach (var question in predefinedQuestions)
                {
                    <MudButton Class="text-start text-wrap" 
                      Style="justify-content: flex-start; text-align: left;" 
                      Variant="Variant.Text"
                      OnClick="() => SendPredefinedQuestion(question)">
                        @question
                    </MudButton>
                }
            </div>
        }
    </div>

    <!-- Chat Container -->
    <MudPaper Elevation="2" Class="@(isMenuExpanded ? "chat-wrapper menu-expanded" : "chat-wrapper")" Style="width:100%; display: flex; flex-direction: column; background-color: var(--mud-palette-background-gray);">
        <MudPaper id="chatContainer" Class="pa-4" Style="flex: 1; overflow-y: auto; scrollbar-width: thin; scrollbar-color: #555 #1a1a27;margin-bottom: 2px;" Elevation="1">
            @if (ChatState.SelectedConversation == null || ChatState.SelectedConversation.Messages == null || !ChatState.SelectedConversation.Messages.Any())
            {
                <MudText Color="Color.Default" Align="Align.Center">Start a conversation below!</MudText>
            }
            else
            {
                @foreach (var message in ChatState.SelectedConversation.Messages.TakeLast(50))
                {
                    bool isUserMessage = message.Sender == "You";
                    <MudCard Class="@(isUserMessage ? "mb-3 mud-theme-primary" : "mb-3 mud-theme-secondary")" Elevation="2">
                        <MudCardContent Class="dark-text">
                            @if (isUserMessage)
                            {
                                <MudText Typo="Typo.body1">@((MarkupString)message.Text)</MudText>
                            }
                            else
                            {
                                @if (string.IsNullOrEmpty(message.Text))
                                {
                                    <MudText Color="Color.Error">No bot response received. Please try again.</MudText>
                                }
                                else
                                {
                                    <MudText Typo="Typo.body1"><MarkdownRenderer Content="@message.Text" /></MudText>
                                }
                            }
                        </MudCardContent>
                    </MudCard>
                }
                @if (IsProcessing)
                {
                    <MudText Align="Align.Center" Class="processing-animation">
                        <MudProgressCircular Class="mr-2" Size="Size.Small" Color="Color.Info" Indeterminate="true" />
                        Processing...
                    </MudText>
                }
            }
        </MudPaper>
        <div class="chat-input-wrapper" style="padding: 16px;padding-top: 8px;">
            <MudTextField @ref="chatInputField" 
                         Id="chatInput" 
                         @bind-Value="UserMessage"
                         TextUpdateSuppression="true"
                         DebounceInterval="50"
                         Clearable="true"
                         Adornment="Adornment.End"
                         Placeholder="Type your message and press Enter..."
                         Variant="Variant.Outlined"
                         Margin="Margin.Dense"
                         Immediate="true"
                         Disabled="@IsProcessing"
                         OnKeyDown="@HandleKeyPress" />
        </div>
    </MudPaper>
</div>

@code {
    [Parameter]
    public string m { get; set; }

    private MudTextField<string> chatInputField;
    private string UserMessage { get; set; } = string.Empty;
    private bool IsProcessing { get; set; } = false;
    private bool isMenuExpanded = false;

    private bool _shouldScrollToBottom = false;
    private string apiUrl;

    protected override void OnInitialized()
    {
        ChatState.OnChange += StateHasChanged;
        apiUrl = Configuration["ApiSettings:ChatbotApiUrl"];
    }

    protected override async Task OnInitializedAsync()
    {
        await ChatState.LoadConversationsAsync();
        if (ChatState.ConversationSummaries.Any())
        {
            await ChatState.SelectConversation(ChatState.ConversationSummaries.First().ConversationId);
        }
        else
        {
            await ChatState.HandleNewConversation();
        }

        // Handle route parameter first
        if (!string.IsNullOrEmpty(m))
        {
            UserMessage = m;
            await HandleSendMessageAsync(UserMessage);
            return;
        }

        // Check if there is a message in the URL query parameter
        var uri = new Uri(Navigation.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("m", out var message))
        {
            IsProcessing = true;
            try
            {
                await HandleSendMessageAsync(message);
            }
            finally
            {
                IsProcessing = false;
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await chatInputField.FocusAsync();
        }
        if (_shouldScrollToBottom)
        {
            _shouldScrollToBottom = false;
            await ScrollToBottom();
        }
    }

    public void Dispose()
    {
        ChatState.OnChange -= StateHasChanged;
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key != "Enter" || string.IsNullOrWhiteSpace(UserMessage) || IsProcessing)
            return;

        var messageToSend = UserMessage.Trim();
        UserMessage = string.Empty;
        IsProcessing = true;
        
        try 
        {
            await HandleSendMessageAsync(messageToSend);
        }
        finally 
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task HandleSendMessageAsync(string messageToSend)
    {
        if (ChatState.SelectedConversation == null)
        {
            IsProcessing = false;
            return;
        }

        // Batch state updates
        await Task.Run(async () => 
        {
            ChatState.SelectedConversation.Messages.Add(new Message { Text = messageToSend, Sender = "You" });
            await InvokeAsync(() => 
            {
                ChatState.NotifyStateChanged();
                _shouldScrollToBottom = true;
            });
        });

        var tempId = ChatState.SelectedConversation.ConversationId;
        if (!string.IsNullOrEmpty(tempId))
        {
            apiUrl += $"?conversationId={tempId}";
        }

        try
        {
            var response = await Http.PostAsJsonAsync(apiUrl, new { Prompt = messageToSend });
            if (response.IsSuccessStatusCode)
            {
                var chatResponse = await response.Content.ReadFromJsonAsync<ChatResponse>();
                if (chatResponse != null && !string.IsNullOrEmpty(chatResponse.Response))
                {
                    // Update conversation ID and title if needed
                    if (ChatState.SelectedConversation.ConversationId != chatResponse.ConversationId)
                    {
                        ChatState.SelectedConversation.ConversationId = chatResponse.ConversationId;
                        var summary = ChatState.ConversationSummaries.FirstOrDefault(c => c.ConversationId == tempId);
                        if (summary != null)
                        {
                            summary.ConversationId = chatResponse.ConversationId;
                        }
                    }

                    if (string.IsNullOrWhiteSpace(ChatState.SelectedConversation.Title))
                    {
                        ChatState.SelectedConversation.Title = messageToSend.Length > 50 
                            ? messageToSend.Substring(0, 50) + "..." 
                            : messageToSend;
                    }

                    // Add bot response with typing effect
                    var botMessage = new Message { Text = "", Sender = "Bot" };
                    ChatState.SelectedConversation.Messages.Add(botMessage);
                    ChatState.NotifyStateChanged();
                    _shouldScrollToBottom = true;

                    // Simulate typing effect
                    for (int i = 0; i < chatResponse.Response.Length; i += 15)
                    {
                        botMessage.Text += chatResponse.Response.Substring(i, Math.Min(15, chatResponse.Response.Length - i));
                        ChatState.NotifyStateChanged();
                        await ScrollToBottom();
                        await Task.Delay(1);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ChatState.SelectedConversation.Messages.Add(new Message 
            { 
                Text = $"Error: {ex.Message}. Check your connection.", 
                Sender = "Bot" 
            });
        }
        finally
        {
            IsProcessing = false;
            ChatState.NotifyStateChanged();
            _shouldScrollToBottom = true;
            await chatInputField.FocusAsync();
        }
    }

    private async Task ScrollToBottom()
    {
        await JS.InvokeVoidAsync("scrollChatToBottom", "chatContainer");
    }

    private class ChatResponse
    {
        public string ConversationId { get; set; } = string.Empty;
        public string Response { get; set; } = string.Empty;
    }


    private List<string> predefinedQuestions = new()
    {
        "What are my deductibles?",
        "What is my out-of-pocket maximum?",
        "What are my copayments for primary care visits?",
        "What are my copayments for specialist visits?",
        "What are my prescription drug benefits?",
        "What mental health services are covered?",
        "Is prior authorization required for any services?",
        "What preventive care services are covered?",
        "Are there any exclusions I should know about?",
        "What is my coinsurance for hospital stays?"
    };
    private void ToggleMenu()
    {
        isMenuExpanded = !isMenuExpanded;
        StateHasChanged();
    }
    private async Task SendPredefinedQuestion(string question)
    {
        if (IsProcessing) return;

        IsProcessing = true;
        UserMessage = question;
        isMenuExpanded = false;
        await HandleSendMessageAsync(UserMessage);
    }
}