@page "/mini-chat"
@layout Layout.MiniChatLayout
@using System.Net.Http.Json
@using MudBlazor
@inject IConfiguration Configuration
@inject HttpClient Http
@inject IJSRuntime JS

<PageTitle>Mini Chat</PageTitle>

<MudPaper Elevation="2" Style="width: 100%; display: flex; flex-direction: column; background-color: var(--mud-palette-background-gray); height: calc(100vh - 145px);">
    <!-- Chat content scrolls, takes available space -->
    <MudPaper id="chatContainer" Class="pa-4" Style="flex: 1; overflow-y: auto; scrollbar-width: thin; scrollbar-color: #555 #1a1a27;" Elevation="1">
        @if (Messages == null || !Messages.Any())
        {
            <MudText Color="Color.Default" Align="Align.Center">Start a conversation below!</MudText>
        }
        else
        {
            @foreach (var message in Messages.TakeLast(50))
            {
                bool isUserMessage = message.Sender == "You";
                <MudCard Class="@(isUserMessage ? "mb-3 mud-theme-primary" : "mb-3 mud-theme-secondary")" Elevation="2">
                    <MudCardContent Class="dark-text">
                        <!-- Custom class to enforce dark text -->
                        @if (isUserMessage)
                        {
                            <MudText Typo="Typo.body1">@((MarkupString)message.Text)</MudText>
                        }
                        else
                        {
                            @if (string.IsNullOrEmpty(message.Text))
                            {
                                <MudText Color="Color.Error">No bot response received. Please try again.</MudText>
                            }
                            else
                            {
                                <MudText Typo="Typo.body1"><MarkdownRenderer Content="@message.Text" /></MudText>
                            }
                        }
                    </MudCardContent>
                </MudCard>
            }
            @if (IsProcessing)
            {
                <MudText Align="Align.Center" Class="processing-animation">
                    <MudProgressCircular Class="mr-2" Size="Size.Small" Color="Color.Info" Indeterminate="true" />
                    Processing...
                </MudText>
            }
        }
    </MudPaper>
    <!-- Text field sticks to the bottom -->
    <div style="position: absolute; bottom: 16px; left: 16px; right: 16px;">
        <MudTextField @ref="chatInputField" Id="chatInput" @bind-Value="UserMessage" TextUpdateSuppression="false" Clearable="true"
                      Adornment="Adornment.End"
                      Placeholder="Type your message and press Enter..."
                      Variant="Variant.Outlined"
                      Margin="Margin.Dense"
                      Immediate="true"
                      Disabled="@IsProcessing"
                      OnKeyDown="@((e) => HandleKeyPress(e))" />
    </div>
</MudPaper>

@code {
    private MudTextField<string> chatInputField; // Reference to the text field
    public string UserMessage { get; set; } = string.Empty;
    public bool IsProcessing { get; set; } = false;
    private bool _shouldScrollToBottom = false;
    private List<Message> Messages { get; set; } = new();
    private string? ConversationId { get; set; }
    private string apiUrl;

    protected override async Task OnInitializedAsync()
    {
        ConversationId = Guid.NewGuid().ToString();
        apiUrl = Configuration["ApiSettings:ChatbotApiUrl"];
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await chatInputField.FocusAsync(); // Focus on first render
        }
        if (_shouldScrollToBottom)
        {
            _shouldScrollToBottom = false;
            await ScrollToBottom();
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(UserMessage))
        {
            var messageToSend = UserMessage;
            UserMessage = string.Empty;
            IsProcessing = true;
            StateHasChanged();
            await HandleSendMessageAsync(messageToSend);
        }
    }

    private async Task HandleSendMessageAsync(string messageToSend)
    {
        if (ConversationId == null)
        {
            IsProcessing = false;
            return;
        }

        // Add user message
        Messages.Add(new Message { Text = messageToSend, Sender = "You" });
        StateHasChanged();
        _shouldScrollToBottom = true;
         
        apiUrl += $"?conversationId={ConversationId}";

        try
        {
            var response = await Http.PostAsJsonAsync(apiUrl, new { Prompt = messageToSend });
            if (response.IsSuccessStatusCode)
            {
                var chatResponse = await response.Content.ReadFromJsonAsync<ChatResponse>();
                if (chatResponse != null && !string.IsNullOrEmpty(chatResponse.Response))
                {
                    // Create an empty bot message for the typing effect.
                    var botMessage = new Message { Text = "", Sender = "Bot" };
                    Messages.Add(botMessage);
                    StateHasChanged();
                    _shouldScrollToBottom = true;

                    // Simulate typing effect by appending characters in batches.
                    for (int i = 0; i < chatResponse.Response.Length; i += 3)
                    {
                        botMessage.Text += chatResponse.Response.Substring(i, Math.Min(3, chatResponse.Response.Length - i));
                        StateHasChanged();
                        await ScrollToBottom();
                        await Task.Delay(1); // Increased delay for better animation visibility
                    }
                    ConversationId = chatResponse.ConversationId;
                }
            }
        }
        catch (Exception ex)
        {
            Messages.Add(new Message { Text = $"Error: {ex.Message}. Check your connection.", Sender = "Bot" });
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
            _shouldScrollToBottom = true;
            await chatInputField.FocusAsync(); // Focus after processing
        }
    }

    private async Task ScrollToBottom()
    {
        await JS.InvokeVoidAsync("scrollChatToBottom", "chatContainer");
    }

    public class Message
    {
        public string Text { get; set; } = string.Empty;
        public string Sender { get; set; } = string.Empty;
    }

    public class ChatResponse
    {
        public string ConversationId { get; set; } = string.Empty;
        public string Response { get; set; } = string.Empty;
    }
}